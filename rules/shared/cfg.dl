#pragma once
#include "atoms.dl"

// # Control-flow graph

// A basic block.
.type Block <: symbol


// A basic block and an index corresponding to a statement within that basic block.
.type Location = [ block: Block, stmt: unsigned ]

// ## Nodes

// Indicates that an edge exists between `source` and `target`
.decl cfg_edge(sourceNode: Node, targetNode: Node)
.input cfg_edge

// Enumerates all nodes (note that this approach implies that a single node
// graph is essentially not a thing).
.decl cfg_node(p: Node)

cfg_node(p) :- cfg_edge(p, _).
cfg_node(p) :- cfg_edge(_, p).

// ## Basic Blocks

// An edge in the CFG from the exit of `src` to the entry of `targ`.
.decl bb_edge(src: Block, targ: Block)
.input bb_edge

// The basic block and statement corresponding to each `Node`.
.decl node_loc(node: Node, bb: Block, stmt: unsigned)
.input node_loc

.decl is_loc(loc: Location)

is_loc([bb, stmt]) :- node_loc(_, bb, stmt).
